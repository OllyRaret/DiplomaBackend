{
	"info": {
		"_postman_id": "5a6f6c9b-bab4-443b-8658-ca3a82e34867",
		"name": "6. Startup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44112372",
		"_collection_link": "https://alinaobrezkova.postman.co/workspace/Diploma-tests~e4acbeed-fff8-4ec3-84d0-7292590347e4/collection/44112372-5a6f6c9b-bab4-443b-8658-ca3a82e34867?action=share&source=collection_link&creator=44112372"
	},
	"item": [
		{
			"name": "Login by startuper 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"access_token_startup_3\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'auth_token'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.auth_token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Auth token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.auth_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auth token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the auth token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.auth_token).to.be.a('string').and.to.match(/[A-Za-z0-9]{30,}/, \"Auth token format is not valid\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testuserextra@example.com\",\r\n  \"password\": \"StrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login correct data Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"access_token_specialist\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'auth_token'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.auth_token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Auth token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.auth_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auth token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the auth token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.auth_token).to.be.a('string').and.to.match(/[A-Za-z0-9]{30,}/, \"Auth token format is not valid\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testspecialist@example.com\",\r\n  \"password\": \"StrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login correct data Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"access_token_investor\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'auth_token'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.auth_token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Auth token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.auth_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auth token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the auth token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.auth_token).to.be.a('string').and.to.match(/[A-Za-z0-9]{30,}/, \"Auth token format is not valid\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testinvestor@example.com\",\r\n  \"password\": \"StrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup clear",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "image",
							"type": "file",
							"src": []
						},
						{
							"key": "industry_id",
							"value": "",
							"type": "text"
						},
						{
							"key": "description",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "stage",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "investment_needed",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "required_specialists ",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by startuper",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking the structure and field types of a startup\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(response).to.have.property(\"title\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"image\");\r",
							"    pm.expect(response).to.have.property(\"industry\").that.is.an(\"object\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"    pm.expect(response).to.have.property(\"stage\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"investment_needed\");\r",
							"    pm.expect(response).to.have.property(\"founder\").that.is.an(\"object\");\r",
							"    pm.expect(response).to.have.property(\"required_specialists\").that.is.an(\"array\");\r",
							"    pm.expect(response).to.have.property(\"is_favorited\").that.is.a(\"boolean\");\r",
							"\r",
							"    pm.expect(response.industry).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(response.industry).to.have.property(\"name\").that.is.a(\"string\");\r",
							"\r",
							"    const founder = response.founder;\r",
							"    pm.expect(founder).to.have.property(\"user_id\").that.is.a(\"number\");\r",
							"    pm.expect(founder).to.have.property(\"full_name\").that.is.a(\"string\");\r",
							"    pm.expect(founder).to.have.property(\"contact_phone\").that.is.a(\"string\");\r",
							"    pm.expect(founder).to.have.property(\"contact_email\").that.is.a(\"string\");\r",
							"\r",
							"    response.required_specialists.forEach(spec => {\r",
							"        pm.expect(spec).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(spec).to.have.property(\"profession\").that.is.an(\"object\");\r",
							"        pm.expect(spec.profession).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(spec.profession).to.have.property(\"name\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(spec).to.have.property(\"skills\").that.is.an(\"array\");\r",
							"        spec.skills.forEach(skill => {\r",
							"            pm.expect(skill).to.have.property(\"id\").that.is.a(\"number\");\r",
							"            pm.expect(skill).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        });\r",
							"\r",
							"        pm.expect(spec).to.have.property(\"specialist\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Change startup by startuper",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking the structure and field types of a startup\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(response).to.have.property(\"title\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"image\");\r",
							"    pm.expect(response).to.have.property(\"industry\").that.is.an(\"object\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"    pm.expect(response).to.have.property(\"stage\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"investment_needed\");\r",
							"    pm.expect(response).to.have.property(\"founder\").that.is.an(\"object\");\r",
							"    pm.expect(response).to.have.property(\"required_specialists\").that.is.an(\"array\");\r",
							"    pm.expect(response).to.have.property(\"is_favorited\").that.is.a(\"boolean\");\r",
							"\r",
							"    pm.expect(response.industry).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(response.industry).to.have.property(\"name\").that.is.a(\"string\");\r",
							"\r",
							"    const founder = response.founder;\r",
							"    pm.expect(founder).to.have.property(\"user_id\").that.is.a(\"number\");\r",
							"    pm.expect(founder).to.have.property(\"full_name\").that.is.a(\"string\");\r",
							"    pm.expect(founder).to.have.property(\"contact_phone\").that.is.a(\"string\");\r",
							"    pm.expect(founder).to.have.property(\"contact_email\").that.is.a(\"string\");\r",
							"\r",
							"    response.required_specialists.forEach(spec => {\r",
							"        pm.expect(spec).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(spec).to.have.property(\"profession\").that.is.an(\"object\");\r",
							"        pm.expect(spec.profession).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(spec.profession).to.have.property(\"name\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(spec).to.have.property(\"skills\").that.is.an(\"array\");\r",
							"        spec.skills.forEach(skill => {\r",
							"            pm.expect(skill).to.have.property(\"id\").that.is.a(\"number\");\r",
							"            pm.expect(skill).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        });\r",
							"\r",
							"        pm.expect(spec).to.have.property(\"specialist\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 3,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 20000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change startup by wrong startuper",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_startup_3}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 3,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 20000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change wrong industry_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property('industry_id');\r",
							"    pm.expect(response.industry_id).to.be.an('array');\r",
							"    pm.expect(response.industry_id[0]).to.include('объект не существует');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 99999,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 20000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change wrong industry_id str",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property('industry_id');\r",
							"    pm.expect(response.industry_id).to.be.an('array');\r",
							"    pm.expect(response.industry_id[0]).to.include('Некорректный тип');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": \"str\",\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 20000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change wrong stage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property('stage');\r",
							"    pm.expect(response.stage).to.be.an('array');\r",
							"    pm.expect(response.stage[0]).to.include('нет среди допустимых вариантов');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 1,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"unknown\",\r\n  \"investment_needed\": 20000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change wrong stage id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property('stage');\r",
							"    pm.expect(response.stage).to.be.an('array');\r",
							"    pm.expect(response.stage[0]).to.include('нет среди допустимых вариантов');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 1,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": 1,\r\n  \"investment_needed\": 20000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change investment_needed < 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property('investment_needed');\r",
							"    pm.expect(response.investment_needed).to.be.an('array');\r",
							"    pm.expect(response.investment_needed[0]).to.include('не может быть отрицательной');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 1,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": -10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 3,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change required_specialists ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields\"', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    function searchForError(obj) {\r",
							"        for (const key in obj) {\r",
							"            if (Array.isArray(obj[key])) {\r",
							"                obj[key].forEach(item => {\r",
							"                    if (typeof item === 'string') {\r",
							"                        pm.expect(item.toLowerCase()).to.include('объект не существует');\r",
							"                    } else if (typeof item === 'object' && item !== null) {\r",
							"                        searchForError(item);\r",
							"                    }\r",
							"                });\r",
							"            } else if (typeof obj[key] === 'object' && obj[key] !== null) {\r",
							"                searchForError(obj[key]);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    searchForError(response);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 1,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 9999,\r\n      \"skills_ids\": [3999, 2999]\r\n    },\r\n    {\r\n      \"profession_id\": 4999,\r\n      \"skills_ids\": [1999, 4999]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change by unauthorized user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 1,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change not by owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_investor}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test change\",\r\n  \"industry_id\": 1,\r\n  \"description\": \"Test test test change\",\r\n  \"stage\": \"launch\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [3, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 4,\r\n      \"skills_ids\": [1, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by specialist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_specialist}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by investor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_investor}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by unauthorizes user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_investor}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2]\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4]\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete by specialist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_specialist}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete by investor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_investor}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete by unauthorized user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Detail field should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.detail).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_investor}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete by startup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/startups/1/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by startuper with  specialists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking the structure and field types of a startup\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(response).to.have.property(\"title\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"image\");\r",
							"    pm.expect(response).to.have.property(\"industry\").that.is.an(\"object\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"    pm.expect(response).to.have.property(\"stage\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"investment_needed\");\r",
							"    pm.expect(response).to.have.property(\"founder\").that.is.an(\"object\");\r",
							"    pm.expect(response).to.have.property(\"required_specialists\").that.is.an(\"array\");\r",
							"    pm.expect(response).to.have.property(\"is_favorited\").that.is.a(\"boolean\");\r",
							"\r",
							"    pm.expect(response.industry).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(response.industry).to.have.property(\"name\").that.is.a(\"string\");\r",
							"\r",
							"    const founder = response.founder;\r",
							"    pm.expect(founder).to.have.property(\"user_id\").that.is.a(\"number\");\r",
							"    pm.expect(founder).to.have.property(\"full_name\").that.is.a(\"string\");\r",
							"    pm.expect(founder).to.have.property(\"contact_phone\").that.is.a(\"string\");\r",
							"    pm.expect(founder).to.have.property(\"contact_email\").that.is.a(\"string\");\r",
							"\r",
							"    response.required_specialists.forEach(spec => {\r",
							"        pm.expect(spec).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(spec).to.have.property(\"profession\").that.is.an(\"object\");\r",
							"        pm.expect(spec.profession).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(spec.profession).to.have.property(\"name\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(spec).to.have.property(\"skills\").that.is.an(\"array\");\r",
							"        spec.skills.forEach(skill => {\r",
							"            pm.expect(skill).to.have.property(\"id\").that.is.a(\"number\");\r",
							"            pm.expect(skill).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        });\r",
							"\r",
							"        pm.expect(spec).to.have.property(\"specialist\");\r",
							"        pm.expect(spec.specialist).to.have.property(\"user_id\").that.is.a(\"number\");\r",
							"        pm.expect(spec.specialist).to.have.property(\"full_name\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2],\r\n      \"specialist_user_id\": 6\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4],\r\n      \"specialist_user_id\": 7\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by startuper with startuper and investor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test('Response has the required fields\"', function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    function searchForError(obj) {\r",
							"        for (const key in obj) {\r",
							"            if (Array.isArray(obj[key])) {\r",
							"                obj[key].forEach(item => {\r",
							"                    if (typeof item === 'string') {\r",
							"                        pm.expect(item.toLowerCase()).to.include('не является специалистом');\r",
							"                    } else if (typeof item === 'object' && item !== null) {\r",
							"                        searchForError(item);\r",
							"                    }\r",
							"                });\r",
							"            } else if (typeof obj[key] === 'object' && obj[key] !== null) {\r",
							"                searchForError(obj[key]);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    searchForError(response);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2],\r\n      \"specialist_user_id\": 3\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4],\r\n      \"specialist_user_id\": 5\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create startup by startuper with wrong id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"industry_id\": 2,\r\n  \"description\": \"Test test test\",\r\n  \"stage\": \"waiting\",\r\n  \"investment_needed\": 10000,\r\n  \"required_specialists\": [\r\n    {\r\n      \"profession_id\": 1,\r\n      \"skills_ids\": [1, 2],\r\n      \"specialist_user_id\": 9999\r\n    },\r\n    {\r\n      \"profession_id\": 2,\r\n      \"skills_ids\": [3, 4],\r\n      \"specialist_user_id\": \"\"\r\n    }\r\n  ]\r\n}\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get startups by startuper",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_sturtup}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/startups/my-startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"my-startups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get startups by specialist",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{access_token_specialist}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/startups/my-startups/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"startups",
						"my-startups",
						""
					]
				}
			},
			"response": []
		}
	]
}