{
	"info": {
		"_postman_id": "4c483ac5-fb77-4ec7-9924-dc50a406c5a2",
		"name": "2. Login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44112372",
		"_collection_link": "https://alinaobrezkova.postman.co/workspace/Diploma-tests~e4acbeed-fff8-4ec3-84d0-7292590347e4/collection/44112372-4c483ac5-fb77-4ec7-9924-dc50a406c5a2?action=share&source=collection_link&creator=44112372"
	},
	"item": [
		{
			"name": "Correct data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"if (jsonData.auth_token) {\r",
							"    pm.environment.set(\"access_token\", jsonData.auth_token);\r",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);\r",
							"} else {\r",
							"    console.warn(\"Токен не найден в ответе.\");\r",
							"}\r",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'auth_token'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.auth_token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Auth token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.auth_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auth token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the auth token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.auth_token).to.be.a('string').and.to.match(/[A-Za-z0-9]{30,}/, \"Auth token format is not valid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testuser@example.com\",\r\n  \"password\": \"StrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Correct data new token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'http://localhost:8000/api/auth/token/logout/',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Authorization': 'Token ' + pm.environment.get(\"access_token\"),\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(\"Ошибка при logout:\", err);\r",
							"    } else {\r",
							"        console.log(\"Logout выполнен. Статус:\", res.status);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.auth_token) {\r",
							"    let secondToken = jsonData.auth_token;\r",
							"    let firstToken = pm.environment.get(\"access_token\");\r",
							"\r",
							"    pm.environment.set(\"access_token2\", jsonData.auth_token);\r",
							"\r",
							"    console.log(\"Второй токен:\", jsonData.auth_token);\r",
							"    console.log(\"Первый токен:\", firstToken);\r",
							"\r",
							"    pm.test(\"Токены должны отличаться\", function () {\r",
							"        pm.expect(jsonData.auth_token).to.not.equal(firstToken);\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    console.warn(\"Второй токен не получен.\");\r",
							"}\r",
							"\r",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - auth_token\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.auth_token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Auth_token should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.auth_token).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Auth token is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.auth_token).to.be.a('string').and.to.match(/[A-Za-z0-9]{20}/, \"Auth token should be a 20-character alphanumeric string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testuser@example.com\",\r\n  \"password\": \"StrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"if (jsonData.auth_token) {\r",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);\r",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);\r",
							"} else {\r",
							"    console.warn(\"Токен не найден в ответе.\");\r",
							"}\r",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.non_field_errors).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Non_field_errors should be an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.non_field_errors).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Non field errors array should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.non_field_errors).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Ensure that Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testuser@example.com\",\r\n  \"password\": \"WrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - non_field_errors\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.non_field_errors).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the non_field_errors array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.non_field_errors).to.exist;",
							"    pm.expect(responseData.non_field_errors).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should contain at least one element\");",
							"});",
							"",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"notfound@example.com\",\r\n  \"password\": \"StrongPass123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"StrongPass123!\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response includes the 'password' field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('password');",
							"});",
							"",
							"",
							"pm.test(\"Password field should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.password).to.have.lengthOf.at.least(1, \"Password field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response does not include sensitive information\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.not.include.keys('пароль');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"user1@example.com\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Without email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"if (jsonData.auth_token) {\r",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);\r",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);\r",
							"} else {\r",
							"    console.warn(\"Токен не найден в ответе.\");\r",
							"}\r",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the expected Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Non field errors array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.non_field_errors).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Non field errors array should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.non_field_errors).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"StrongPass123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Without password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"user1@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty password and email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"if (jsonData.auth_token) {\r",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);\r",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);\r",
							"} else {\r",
							"    console.warn(\"Токен не найден в ответе.\");\r",
							"}\r",
							"",
							"pm.test('Response status code is 400', function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"})",
							"",
							"pm.test('Response has the required fields - password and email', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('password');",
							"    pm.expect(responseData).to.have.property('email');",
							"})",
							"",
							"pm.test('Password is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.password).to.be.an('array').that.is.not.empty;",
							"    responseData.password.forEach(function (password) {",
							"        pm.expect(password).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Password should not be empty');",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Without password and email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"if (jsonData.auth_token) {",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);",
							"} else {",
							"    console.warn(\"Токен не найден в ответе.\");",
							"}",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong email format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"if (jsonData.auth_token) {\r",
							"    pm.environment.set(\"wrong_access_token\", jsonData.auth_token);\r",
							"    console.log(\"Токен сохранён:\", jsonData.auth_token);\r",
							"} else {\r",
							"    console.warn(\"Токен не найден в ответе.\");\r",
							"}\r",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response contains the non_field_errors array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.non_field_errors).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Non field errors array should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.non_field_errors).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Non_field_errors array contains non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.non_field_errors).to.be.an('array').that.is.not.empty;",
							"  responseData.non_field_errors.forEach(function(error) {",
							"    pm.expect(error).to.be.a('string').and.to.not.be.empty;",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"not-an-email\",\r\n  \"password\": \"StrongPass123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/auth/token/login/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				}
			},
			"response": []
		}
	]
}